generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid()) @db.Uuid
  email             String           @unique
  password          String?          // Nullable if Azure AD handles authentication
  name              String?
  displayName       String?          // Corresponds to 'displayName' in Graph API
  mailNickname      String?          // Corresponds to 'mailNickname' in Graph API
  userPrincipalName String?          // Corresponds to 'userPrincipalName' in Graph API
  accountEnabled    Boolean?         // Corresponds to 'accountEnabled' in Graph API
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  roleId            String?          @db.Uuid
  role              Role?            @relation("UserRole", fields: [roleId], references: [id], onDelete: SetNull)
  userPermissions   UserPermission[]
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       User[]           @relation("UserRole")
  permissions RolePermission[]
}

model Permission {
  id              String           @id @default(uuid()) @db.Uuid
  action          String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  roles           RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  id           String   @id @default(uuid()) @db.Uuid
  roleId       String   @db.Uuid
  permissionId String   @db.Uuid
  role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([roleId, permissionId])
}

model UserPermission {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  permissionId String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  grantedAt    DateTime  @default(now())

  @@unique([userId, permissionId])
}

