generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid()) @db.Uuid
  email             String           @unique
  password          String?
  name              String?
  azureId           String           @unique
  displayName       String? // Corresponds to 'displayName' in Graph API
  mailNickname      String? // Corresponds to 'mailNickname' in Graph API
  userPrincipalName String? // Corresponds to 'userPrincipalName' in Graph API
  accountEnabled    Boolean? // Corresponds to 'accountEnabled' in Graph API
  deleted_at        DateTime?
  is_deleted        Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  roleId            String?          @db.Uuid
  role              Role?            @relation("UserRole", fields: [roleId], references: [id], onDelete: SetNull)
  userPermissions   UserPermission[]
  projects          Project[]
  Issue             Issue[]
  Order             Order[]
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       User[]           @relation("UserRole")
  permissions RolePermission[]
}

model Permission {
  id              String           @id @default(uuid()) @db.Uuid
  action          String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  roles           RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  id           String     @id @default(uuid()) @db.Uuid
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
}

model UserPermission {
  id           String     @id @default(uuid()) @db.Uuid
  userId       String     @db.Uuid
  permissionId String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  grantedAt    DateTime   @default(now())

  @@unique([userId, permissionId])
}

model Project {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String?
  status      String
  startDate   DateTime?
  endDate     DateTime?
  archived    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       File[]
  issues      Issue[]
}

model File {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @db.Uuid
  filePath  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Issue {
  id          String      @id @default(uuid()) @db.Uuid
  projectId   String      @db.Uuid
  userId      String      @db.Uuid
  title       String
  description String?
  status      String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueFiles  IssueFile[]
}

model IssueFile {
  id        String   @id @default(uuid()) @db.Uuid
  issueId   String   @db.Uuid
  filePath  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  description String?
  location    String?
  status      String
  price       Float?
  startDate   DateTime?
  endDate     DateTime?
  archived    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      @db.Uuid
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       OrderFile[]
}

model OrderFile {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @db.Uuid
  filePath  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
