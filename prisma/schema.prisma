generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid()) @db.Uuid
  email             String              @unique
  password          String?
  name              String?
  azureId           String?             @unique
  displayName       String? // Corresponds to 'displayName' in Graph API
  mailNickname      String? // Corresponds to 'mailNickname' in Graph API
  userPrincipalName String? // Corresponds to 'userPrincipalName' in Graph API
  accountEnabled    Boolean? // Corresponds to 'accountEnabled' in Graph API
  deleted_at        DateTime?
  is_deleted        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  roleId            String?             @db.Uuid
  role              Role?               @relation("UserRole", fields: [roleId], references: [id], onDelete: SetNull)
  userPermissions   UserPermission[]
  projects          Project[]
  Issue             Issue[]
  Order             Order[]
  IssueHistory      IssueHistory[]
  assignedUsers     IssueAssignment[]
  assignedProjects  ProjectAssignment[]
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       User[]           @relation("UserRole")
  permissions RolePermission[]
}

model Permission {
  id              String           @id @default(uuid()) @db.Uuid
  action          String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  roles           RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  id           String     @id @default(uuid()) @db.Uuid
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
}

model UserPermission {
  id           String     @id @default(uuid()) @db.Uuid
  userId       String     @db.Uuid
  permissionId String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  grantedAt    DateTime   @default(now())

  @@unique([userId, permissionId])
}

model Project {
  id            String              @id @default(uuid()) @db.Uuid
  title         String
  description   String?
  status        String
  startDate     DateTime?
  endDate       DateTime?
  companyName   String?
  companyId     String?             @db.Uuid
  company       Company?            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  archived      Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  userId        String              @db.Uuid
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  files         File[]
  issues        Issue[]
  issueFiles    IssueFile[]
  assignedUsers ProjectAssignment[]
}

model File {
  id        String      @id @default(uuid()) @db.Uuid
  projectId String      @db.Uuid
  filePath  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  IssueFile IssueFile[]
}

model Issue {
  id            String            @id @default(uuid()) @db.Uuid
  projectId     String            @db.Uuid
  userId        String            @db.Uuid
  title         String
  description   String?
  status        String
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  project       Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueFiles    IssueFile[]
  IssueHistory  IssueHistory[]
  assignedUsers IssueAssignment[]
}

model IssueFile {
  id        String   @id @default(uuid()) @db.Uuid
  issueId   String   @db.Uuid
  fileId    String?  @db.Uuid
  filePath  String
  projectId String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  file      File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([issueId, fileId])
}

model IssueAssignment {
  id         String   @id @default(uuid()) @db.Uuid
  issueId    String   @db.Uuid
  userId     String   @db.Uuid
  assignedAt DateTime @default(now())

  issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([issueId, userId]) // Prevents assigning the same user to the same issue multiple times
}

model IssueHistory {
  id        String   @id @default(uuid()) @db.Uuid
  issueId   String   @db.Uuid
  userId    String   @db.Uuid
  fieldName String // Name of the field that was changed (e.g., "status", "description")
  oldValue  String? // Previous value of the field
  newValue  String? // New value of the field
  createdAt DateTime @default(now())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  location        String?
  status          String
  price           Float?
  companyName     String?
  startDate       DateTime?
  endDate         DateTime?
  archived        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          String            @db.Uuid
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  files           OrderFile[]
  OrderSignatures OrderSignatures[]
}

model OrderFile {
  id              String            @id @default(uuid()) @db.Uuid
  orderId         String            @db.Uuid
  filePath        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  OrderSignatures OrderSignatures[]
}

model OrderSignatures {
  id        String    @id @default(uuid()) @db.Uuid
  orderId   String    @db.Uuid
  fileId    String    @db.Uuid
  path      String
  filename  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderFile OrderFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Company {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]
}

model ProjectAssignment {
  id         String   @id @default(uuid()) @db.Uuid
  projectId  String   @db.Uuid
  userId     String   @db.Uuid
  assignedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId]) // Prevents assigning the same user to the same project multiple times
}
